// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	generator "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/utils/generator"
	mock "github.com/stretchr/testify/mock"

	payload "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/model/payload"

	response "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/model/response"
)

// ThreadService is an autogenerated mock type for the ThreadService type
type ThreadService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tp, p
func (_m *ThreadService) Create(ctx context.Context, tp generator.TokenPayload, p payload.CreateThread) (string, error) {
	ret := _m.Called(ctx, tp, p)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, generator.TokenPayload, payload.CreateThread) string); ok {
		r0 = rf(ctx, tp, p)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generator.TokenPayload, payload.CreateThread) error); ok {
		r1 = rf(ctx, tp, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, tp, ID
func (_m *ThreadService) Delete(ctx context.Context, tp generator.TokenPayload, ID string) error {
	ret := _m.Called(ctx, tp, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generator.TokenPayload, string) error); ok {
		r0 = rf(ctx, tp, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, tp, page, limit, query
func (_m *ThreadService) GetAll(ctx context.Context, tp generator.TokenPayload, page uint, limit uint, query string) (response.Pagination, error) {
	ret := _m.Called(ctx, tp, page, limit, query)

	var r0 response.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, generator.TokenPayload, uint, uint, string) response.Pagination); ok {
		r0 = rf(ctx, tp, page, limit, query)
	} else {
		r0 = ret.Get(0).(response.Pagination)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generator.TokenPayload, uint, uint, string) error); ok {
		r1 = rf(ctx, tp, page, limit, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, tp, ID
func (_m *ThreadService) GetByID(ctx context.Context, tp generator.TokenPayload, ID string) (response.Thread, error) {
	ret := _m.Called(ctx, tp, ID)

	var r0 response.Thread
	if rf, ok := ret.Get(0).(func(context.Context, generator.TokenPayload, string) response.Thread); ok {
		r0 = rf(ctx, tp, ID)
	} else {
		r0 = ret.Get(0).(response.Thread)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, generator.TokenPayload, string) error); ok {
		r1 = rf(ctx, tp, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tp, ID, p
func (_m *ThreadService) Update(ctx context.Context, tp generator.TokenPayload, ID string, p payload.UpdateThread) error {
	ret := _m.Called(ctx, tp, ID, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generator.TokenPayload, string, payload.UpdateThread) error); ok {
		r0 = rf(ctx, tp, ID, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewThreadServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewThreadService creates a new instance of ThreadService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewThreadService(t NewThreadServiceT) *ThreadService {
	mock := &ThreadService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
