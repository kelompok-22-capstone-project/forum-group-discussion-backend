// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	response "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/model/response"
	mock "github.com/stretchr/testify/mock"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// GetDashboardInfo provides a mock function with given fields: ctx, accessorRole
func (_m *AdminService) GetDashboardInfo(ctx context.Context, accessorRole string) (response.DashboardInfo, error) {
	ret := _m.Called(ctx, accessorRole)

	var r0 response.DashboardInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) response.DashboardInfo); ok {
		r0 = rf(ctx, accessorRole)
	} else {
		r0 = ret.Get(0).(response.DashboardInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessorRole)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAdminService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminService(t mockConstructorTestingTNewAdminService) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
