// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	payload "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/model/payload"
	response "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/model/response"
	mock "github.com/stretchr/testify/mock"
)

// CategoryService is an autogenerated mock type for the CategoryService type
type CategoryService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, accessorRole, p
func (_m *CategoryService) Create(ctx context.Context, accessorRole string, p payload.CreateCategory) (string, error) {
	ret := _m.Called(ctx, accessorRole, p)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, payload.CreateCategory) string); ok {
		r0 = rf(ctx, accessorRole, p)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, payload.CreateCategory) error); ok {
		r1 = rf(ctx, accessorRole, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, accessorRole, id
func (_m *CategoryService) Delete(ctx context.Context, accessorRole string, id string) error {
	ret := _m.Called(ctx, accessorRole, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, accessorRole, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *CategoryService) GetAll(ctx context.Context) ([]response.Category, error) {
	ret := _m.Called(ctx)

	var r0 []response.Category
	if rf, ok := ret.Get(0).(func(context.Context) []response.Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByCategory provides a mock function with given fields: ctx, accessorID, categoryID, page, limit
func (_m *CategoryService) GetAllByCategory(ctx context.Context, accessorID string, categoryID string, page uint, limit uint) (response.Pagination[response.ManyThread], error) {
	ret := _m.Called(ctx, accessorID, categoryID, page, limit)

	var r0 response.Pagination[response.ManyThread]
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint, uint) response.Pagination[response.ManyThread]); ok {
		r0 = rf(ctx, accessorID, categoryID, page, limit)
	} else {
		r0 = ret.Get(0).(response.Pagination[response.ManyThread])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint, uint) error); ok {
		r1 = rf(ctx, accessorID, categoryID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, accessorRole, id, p
func (_m *CategoryService) Update(ctx context.Context, accessorRole string, id string, p payload.UpdateCategory) error {
	ret := _m.Called(ctx, accessorRole, id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, payload.UpdateCategory) error); ok {
		r0 = rf(ctx, accessorRole, id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCategoryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryService creates a new instance of CategoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryService(t mockConstructorTestingTNewCategoryService) *CategoryService {
	mock := &CategoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
