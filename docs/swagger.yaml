basePath: /api/v1
definitions:
  controller.categoriesData:
    properties:
      categories:
        items:
          $ref: '#/definitions/controller.categoryData'
        type: array
        x-order: "0"
    type: object
  controller.categoriesResponse:
    properties:
      data:
        $ref: '#/definitions/controller.categoriesData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.categoryData:
    properties:
      ID:
        type: string
        x-order: "0"
      createdOn:
        description: 'CreatedOn layout format: time.RFC822 (02 Jan 06 15:04 MST)'
        type: string
        x-order: "3"
      description:
        type: string
        x-order: "2"
      name:
        type: string
        x-order: "1"
    type: object
  controller.createThreadResponse:
    properties:
      data:
        $ref: '#/definitions/controller.idData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.idData:
    properties:
      ID:
        type: string
    type: object
  controller.loginResponse:
    properties:
      data:
        $ref: '#/definitions/controller.tokenData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.pageInfoData:
    properties:
      limit:
        type: integer
        x-order: "0"
      page:
        type: integer
        x-order: "1"
      pageTotal:
        type: integer
        x-order: "2"
      total:
        type: integer
        x-order: "3"
    type: object
  controller.profileData:
    properties:
      email:
        type: string
        x-order: "2"
      isActive:
        type: boolean
        x-order: "5"
      name:
        type: string
        x-order: "3"
      registeredOn:
        description: 'RegisteredOn layout format: time.RFC822 (02 Jan 06 15:04 MST)'
        type: string
        x-order: "6"
      role:
        type: string
        x-order: "4"
      totalFollower:
        type: integer
        x-order: "8"
      totalThread:
        type: integer
        x-order: "7"
      userID:
        type: string
        x-order: "0"
      username:
        type: string
        x-order: "1"
    type: object
  controller.profileResponse:
    properties:
      data:
        $ref: '#/definitions/controller.profileData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.registerResponse:
    properties:
      data:
        $ref: '#/definitions/controller.userIDData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.threadData:
    properties:
      ID:
        type: string
        x-order: "0"
      categoryID:
        type: string
        x-order: "10"
      categoryName:
        type: string
        x-order: "11"
      creatorID:
        type: string
        x-order: "7"
      creatorName:
        type: string
        x-order: "9"
      creatorUsername:
        type: string
        x-order: "8"
      description:
        type: string
        x-order: "2"
      publishedOn:
        description: 'PublishedOn layout format: time.RFC822 (02 Jan 06 15:04 MST)'
        type: string
        x-order: "12"
      title:
        type: string
        x-order: "1"
      totalComment:
        type: integer
        x-order: "6"
      totalFollower:
        type: integer
        x-order: "5"
      totalLike:
        type: integer
        x-order: "4"
      totalViewer:
        type: integer
        x-order: "3"
    type: object
  controller.threadResponse:
    properties:
      data:
        $ref: '#/definitions/controller.threadData'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.threadsInfoWrapper:
    properties:
      pageInfo:
        $ref: '#/definitions/controller.pageInfoData'
        x-order: "1"
      threads:
        items:
          $ref: '#/definitions/controller.threadData'
        type: array
        x-order: "0"
    type: object
  controller.threadsResponse:
    properties:
      data:
        $ref: '#/definitions/controller.threadsInfoWrapper'
        x-order: "2"
      message:
        type: string
        x-order: "1"
      status:
        type: string
        x-order: "0"
    type: object
  controller.tokenData:
    properties:
      role:
        type: string
        x-order: "1"
      token:
        type: string
        x-order: "0"
    type: object
  controller.userIDData:
    properties:
      userID:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  payload.CreateThread:
    properties:
      categoryID:
        maxLength: 6
        minLength: 4
        type: string
        x-order: "2"
      description:
        minLength: 2
        type: string
        x-order: "1"
      title:
        maxLength: 50
        minLength: 2
        type: string
        x-order: "0"
    type: object
  payload.Login:
    properties:
      password:
        maxLength: 20
        minLength: 8
        type: string
        x-order: "1"
      username:
        maxLength: 20
        minLength: 2
        type: string
        x-order: "0"
    type: object
  payload.Register:
    properties:
      email:
        maxLength: 50
        minLength: 5
        type: string
        x-order: "1"
      name:
        maxLength: 50
        minLength: 1
        type: string
        x-order: "2"
      password:
        maxLength: 20
        minLength: 8
        type: string
        x-order: "3"
      username:
        maxLength: 20
        minLength: 2
        type: string
        x-order: "0"
    type: object
  payload.UpdateThread:
    properties:
      categoryID:
        maxLength: 6
        minLength: 4
        type: string
        x-order: "2"
      description:
        minLength: 2
        type: string
        x-order: "1"
      title:
        maxLength: 50
        minLength: 2
        type: string
        x-order: "0"
    type: object
host: localhost:3000
info:
  contact:
    email: erikriosetiawan15@gmail.com
    name: Kelompok 22
    url: http://www.swagger.io/support
  description: API for Forum Group Discussion
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Forum Group Discussion API
  version: "1.0"
paths:
  /categories:
    get:
      description: This endpoint is used to get all category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.categoriesResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Categories
      tags:
      - categories
  /categories/{id}/threads:
    get:
      description: This endpoint is used to get the threads of particular category
      parameters:
      - description: category ID
        in: path
        name: id
        required: true
        type: string
      - description: page, default 1
        in: query
        name: page
        type: integer
      - description: limit, default 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.threadsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Category Threads
      tags:
      - categories
  /login:
    post:
      consumes:
      - application/json
      description: This endpoint is used for user login
      parameters:
      - description: user credentials
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/payload.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: User Login
      tags:
      - login
  /register:
    post:
      consumes:
      - application/json
      description: This endpoint is used for user register.
      parameters:
      - description: register payload
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/payload.Register'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.registerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: User Register
      tags:
      - register
  /threads:
    get:
      description: This endpoint is used to get all threads
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.threadsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get Threads
      tags:
      - threads
    post:
      consumes:
      - application/json
      description: This endpoint is used to create a thread
      parameters:
      - description: request body
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/payload.CreateThread'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.createThreadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a Thread
      tags:
      - threads
  /threads/{id}:
    delete:
      description: This endpoint is used to delete a thread by ID
      parameters:
      - description: thread ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete Thread by ID
      tags:
      - threads
    get:
      description: This endpoint is used to get thread by ID
      parameters:
      - description: thread ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.threadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get Thread by ID
      tags:
      - threads
    put:
      consumes:
      - application/json
      description: This endpoint is used to update a thread
      parameters:
      - description: request body
        in: body
        name: default
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateThread'
      - description: thread ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a Thread
      tags:
      - threads
  /users/{username}:
    get:
      description: This endpoint is used to get the another user by username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.profileResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get User by Username
      tags:
      - users
  /users/{username}/threads:
    get:
      description: This endpoint is used to get the user threads
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: page, default 1
        in: query
        name: page
        type: integer
      - description: limit, default 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.threadsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get User Threads
      tags:
      - users
  /users/me:
    get:
      description: This endpoint is used to get their own user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.profileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get Own Profile
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
