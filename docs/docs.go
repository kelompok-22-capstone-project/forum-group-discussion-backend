// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Kelompok 22",
            "url": "http://www.swagger.io/support",
            "email": "erikriosetiawan15@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "This endpoint is used for user login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "default",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payload.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.loginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "This endpoint is used for user register.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "register"
                ],
                "summary": "User Register",
                "parameters": [
                    {
                        "description": "register payload",
                        "name": "default",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payload.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.registerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.idData": {
            "type": "object",
            "properties": {
                "userID": {
                    "type": "string"
                }
            }
        },
        "controller.loginResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "x-order": "0"
                },
                "message": {
                    "type": "string",
                    "x-order": "1"
                },
                "data": {
                    "x-order": "2",
                    "$ref": "#/definitions/controller.tokenData"
                }
            }
        },
        "controller.registerResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "x-order": "0"
                },
                "message": {
                    "type": "string",
                    "x-order": "1"
                },
                "data": {
                    "x-order": "2",
                    "$ref": "#/definitions/controller.idData"
                }
            }
        },
        "controller.tokenData": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "x-order": "0"
                },
                "role": {
                    "type": "string",
                    "x-order": "1"
                }
            }
        },
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "payload.Login": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "x-order": "0"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5,
                    "x-order": "1"
                }
            }
        },
        "payload.Register": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 2,
                    "x-order": "0"
                },
                "email": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 5,
                    "x-order": "1"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "x-order": "2"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 5,
                    "x-order": "3"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Forum Group Discussion API",
	Description:      "API for Forum Group Discussion",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
