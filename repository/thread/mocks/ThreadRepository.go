// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/entity"
	mock "github.com/stretchr/testify/mock"
)

// ThreadRepository is an autogenerated mock type for the ThreadRepository type
type ThreadRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *ThreadRepository) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFollowThread provides a mock function with given fields: ctx, threadFollow
func (_m *ThreadRepository) DeleteFollowThread(ctx context.Context, threadFollow entity.ThreadFollow) error {
	ret := _m.Called(ctx, threadFollow)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ThreadFollow) error); ok {
		r0 = rf(ctx, threadFollow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLike provides a mock function with given fields: ctx, like
func (_m *ThreadRepository) DeleteLike(ctx context.Context, like entity.Like) error {
	ret := _m.Called(ctx, like)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Like) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModerator provides a mock function with given fields: ctx, moderator
func (_m *ThreadRepository) DeleteModerator(ctx context.Context, moderator entity.Moderator) error {
	ret := _m.Called(ctx, moderator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Moderator) error); ok {
		r0 = rf(ctx, moderator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByCategoryIDWithPagination provides a mock function with given fields: ctx, accessorUserID, categoryID, pageInfo
func (_m *ThreadRepository) FindAllByCategoryIDWithPagination(ctx context.Context, accessorUserID string, categoryID string, pageInfo entity.PageInfo) (entity.Pagination, error) {
	ret := _m.Called(ctx, accessorUserID, categoryID, pageInfo)

	var r0 entity.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entity.PageInfo) entity.Pagination); ok {
		r0 = rf(ctx, accessorUserID, categoryID, pageInfo)
	} else {
		r0 = ret.Get(0).(entity.Pagination)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, entity.PageInfo) error); ok {
		r1 = rf(ctx, accessorUserID, categoryID, pageInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCommentByThreadID provides a mock function with given fields: ctx, threadID, pageInfo
func (_m *ThreadRepository) FindAllCommentByThreadID(ctx context.Context, threadID string, pageInfo entity.PageInfo) (entity.Pagination, error) {
	ret := _m.Called(ctx, threadID, pageInfo)

	var r0 entity.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.PageInfo) entity.Pagination); ok {
		r0 = rf(ctx, threadID, pageInfo)
	} else {
		r0 = ret.Get(0).(entity.Pagination)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, entity.PageInfo) error); ok {
		r1 = rf(ctx, threadID, pageInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllModeratorByThreadID provides a mock function with given fields: ctx, threadID
func (_m *ThreadRepository) FindAllModeratorByThreadID(ctx context.Context, threadID string) ([]entity.Moderator, error) {
	ret := _m.Called(ctx, threadID)

	var r0 []entity.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Moderator); ok {
		r0 = rf(ctx, threadID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllWithPagination provides a mock function with given fields: ctx, accessorUserID, pageInfo
func (_m *ThreadRepository) FindAllWithPagination(ctx context.Context, accessorUserID string, pageInfo entity.PageInfo) (entity.Pagination, error) {
	ret := _m.Called(ctx, accessorUserID, pageInfo)

	var r0 entity.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.PageInfo) entity.Pagination); ok {
		r0 = rf(ctx, accessorUserID, pageInfo)
	} else {
		r0 = ret.Get(0).(entity.Pagination)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, entity.PageInfo) error); ok {
		r1 = rf(ctx, accessorUserID, pageInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllWithQueryAndPagination provides a mock function with given fields: ctx, accessorUserID, query, pageInfo
func (_m *ThreadRepository) FindAllWithQueryAndPagination(ctx context.Context, accessorUserID string, query string, pageInfo entity.PageInfo) (entity.Pagination, error) {
	ret := _m.Called(ctx, accessorUserID, query, pageInfo)

	var r0 entity.Pagination
	if rf, ok := ret.Get(0).(func(context.Context, string, string, entity.PageInfo) entity.Pagination); ok {
		r0 = rf(ctx, accessorUserID, query, pageInfo)
	} else {
		r0 = ret.Get(0).(entity.Pagination)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, entity.PageInfo) error); ok {
		r1 = rf(ctx, accessorUserID, query, pageInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, accessorUserID, ID
func (_m *ThreadRepository) FindByID(ctx context.Context, accessorUserID string, ID string) (entity.Thread, error) {
	ret := _m.Called(ctx, accessorUserID, ID)

	var r0 entity.Thread
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.Thread); ok {
		r0 = rf(ctx, accessorUserID, ID)
	} else {
		r0 = ret.Get(0).(entity.Thread)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accessorUserID, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *ThreadRepository) Insert(ctx context.Context, _a1 entity.Thread) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Thread) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertFollowThread provides a mock function with given fields: ctx, threadFollow
func (_m *ThreadRepository) InsertFollowThread(ctx context.Context, threadFollow entity.ThreadFollow) error {
	ret := _m.Called(ctx, threadFollow)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ThreadFollow) error); ok {
		r0 = rf(ctx, threadFollow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertLike provides a mock function with given fields: ctx, like
func (_m *ThreadRepository) InsertLike(ctx context.Context, like entity.Like) error {
	ret := _m.Called(ctx, like)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Like) error); ok {
		r0 = rf(ctx, like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertModerator provides a mock function with given fields: ctx, moderator
func (_m *ThreadRepository) InsertModerator(ctx context.Context, moderator entity.Moderator) error {
	ret := _m.Called(ctx, moderator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Moderator) error); ok {
		r0 = rf(ctx, moderator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, ID, _a2
func (_m *ThreadRepository) Update(ctx context.Context, ID string, _a2 entity.Thread) error {
	ret := _m.Called(ctx, ID, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Thread) error); ok {
		r0 = rf(ctx, ID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewThreadRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewThreadRepository creates a new instance of ThreadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewThreadRepository(t NewThreadRepositoryT) *ThreadRepository {
	mock := &ThreadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
