// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/entity"
	mock "github.com/stretchr/testify/mock"
)

// ReportRepository is an autogenerated mock type for the ReportRepository type
type ReportRepository struct {
	mock.Mock
}

// GetReportsWithPagination provides a mock function with given fields: ctx, pageInfo, reportStatus
func (_m *ReportRepository) GetReportsWithPagination(ctx context.Context, pageInfo entity.PageInfo, reportStatus entity.ReportStatus) (entity.Pagination[entity.UserBanned], error) {
	ret := _m.Called(ctx, pageInfo, reportStatus)

	var r0 entity.Pagination[entity.UserBanned]
	if rf, ok := ret.Get(0).(func(context.Context, entity.PageInfo, entity.ReportStatus) entity.Pagination[entity.UserBanned]); ok {
		r0 = rf(ctx, pageInfo, reportStatus)
	} else {
		r0 = ret.Get(0).(entity.Pagination[entity.UserBanned])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.PageInfo, entity.ReportStatus) error); ok {
		r1 = rf(ctx, pageInfo, reportStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, ID, moderatorID, userID, threadID, reason
func (_m *ReportRepository) Insert(ctx context.Context, ID string, moderatorID string, userID string, threadID string, reason string) error {
	ret := _m.Called(ctx, ID, moderatorID, userID, threadID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) error); ok {
		r0 = rf(ctx, ID, moderatorID, userID, threadID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReportRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReportRepository creates a new instance of ReportRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReportRepository(t mockConstructorTestingTNewReportRepository) *ReportRepository {
	mock := &ReportRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
