// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// BannedUser provides a mock function with given fields: ctx, userID
func (_m *UserRepository) BannedUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllWithStatusAndPagination provides a mock function with given fields: ctx, accessorUserID, orderBy, userStatus, pageInfo, keyword
func (_m *UserRepository) FindAllWithStatusAndPagination(ctx context.Context, accessorUserID string, orderBy entity.UserOrderBy, userStatus entity.UserStatus, pageInfo entity.PageInfo, keyword string) (entity.Pagination[entity.User], error) {
	ret := _m.Called(ctx, accessorUserID, orderBy, userStatus, pageInfo, keyword)

	var r0 entity.Pagination[entity.User]
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserOrderBy, entity.UserStatus, entity.PageInfo, string) entity.Pagination[entity.User]); ok {
		r0 = rf(ctx, accessorUserID, orderBy, userStatus, pageInfo, keyword)
	} else {
		r0 = ret.Get(0).(entity.Pagination[entity.User])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, entity.UserOrderBy, entity.UserStatus, entity.PageInfo, string) error); ok {
		r1 = rf(ctx, accessorUserID, orderBy, userStatus, pageInfo, keyword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepository) FindByUsername(ctx context.Context, username string) (entity.User, error) {
	ret := _m.Called(ctx, username)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsernameWithAccessor provides a mock function with given fields: ctx, accessorUserID, username
func (_m *UserRepository) FindByUsernameWithAccessor(ctx context.Context, accessorUserID string, username string) (entity.User, error) {
	ret := _m.Called(ctx, accessorUserID, username)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.User); ok {
		r0 = rf(ctx, accessorUserID, username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accessorUserID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowUser provides a mock function with given fields: ctx, ID, accessorUserID, userID
func (_m *UserRepository) FollowUser(ctx context.Context, ID string, accessorUserID string, userID string) error {
	ret := _m.Called(ctx, ID, accessorUserID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, ID, accessorUserID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *UserRepository) Insert(ctx context.Context, _a1 entity.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnbannedUser provides a mock function with given fields: ctx, userID
func (_m *UserRepository) UnbannedUser(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnfollowUser provides a mock function with given fields: ctx, accessorUserID, userID
func (_m *UserRepository) UnfollowUser(ctx context.Context, accessorUserID string, userID string) error {
	ret := _m.Called(ctx, accessorUserID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, accessorUserID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
