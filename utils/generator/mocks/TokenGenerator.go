// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	generator "github.com/kelompok-22-capstone-project/forum-group-discussion-backend/utils/generator"
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// TokenGenerator is an autogenerated mock type for the TokenGenerator type
type TokenGenerator struct {
	mock.Mock
}

// ExtractToken provides a mock function with given fields: c
func (_m *TokenGenerator) ExtractToken(c echo.Context) generator.TokenPayload {
	ret := _m.Called(c)

	var r0 generator.TokenPayload
	if rf, ok := ret.Get(0).(func(echo.Context) generator.TokenPayload); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(generator.TokenPayload)
	}

	return r0
}

// GenerateToken provides a mock function with given fields: payload
func (_m *TokenGenerator) GenerateToken(payload generator.TokenPayload) (string, error) {
	ret := _m.Called(payload)

	var r0 string
	if rf, ok := ret.Get(0).(func(generator.TokenPayload) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(generator.TokenPayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenGenerator interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenGenerator creates a new instance of TokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenGenerator(t mockConstructorTestingTNewTokenGenerator) *TokenGenerator {
	mock := &TokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
